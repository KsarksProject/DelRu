{"name": "test_task_create", "status": "failed", "statusDetails": {"message": "AssertionError: Test failed due to: Не удалось нажать на кнопку 'Другой пользователь'", "trace": "self = <pages.task_main_page.TaskPage object at 0x000002650EF4FFB0>, executor = 'Бардашевич Александр', deadline = '17-06-2024'\n\n    @allure.feature(\"Task Functionality\")\n    @allure.story(\"Self Task Creation\")\n    @pytest.mark.parametrize(\"executor, deadline\", [(Task.EXECUTOR, Task.DEADLINE)])\n    def test_self_task(self, executor=Task.EXECUTOR, deadline=Task.DEADLINE):\n        with allure.step(\"Нажатие на кнопку 'Создать'\"):\n            try:\n                self.page.locator('text=Создать').nth(0).click()\n            except Exception as e:\n                allure.attach(\n                    self.page.screenshot(),\n                    name=\"Failed click on 'Создать'\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n                allure.attach(str(e), name=\"Exception Trace\")\n                allure.fail(\"Ошибка при нажатии на кнопку 'Создать'\")\n    \n        self.page.wait_for_timeout(1000)\n    \n        with allure.step(\"Выбор 'Прочее'\"):\n            try:\n                self.page.locator('text=Прочее…').click()\n            except Exception as e:\n                allure.attach(\n                    self.page.screenshot(),\n                    name=\"Failed click on 'Прочее'\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n                allure.attach(str(e), name=\"Exception Trace\")\n                allure.fail(\"Ошибка при выборе 'Прочее'\")\n    \n        self.page.wait_for_timeout(1000)\n    \n        with allure.step(\"Поиск и выбор задачи\"):\n            try:\n                self.page.locator('[placeholder=\"Искать в списке…\"]').fill('Задача на исполнение поручения')\n                self.page.wait_for_timeout(1000)\n                self.page.locator('text=Задача на исполнение поручения').click()\n            except Exception as e:\n                allure.attach(\n                    self.page.screenshot(),\n                    name=\"Failed task selection\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n                allure.attach(str(e), name=\"Exception Trace\")\n                allure.fail(\"Ошибка при поиске и выборе задачи\")\n    \n        try:\n            form_ctrl = self.page.locator(\"div\").filter(\n                has_text=re.compile(r\"^ИсполнительСрок$\")\n            ).get_by_role(\"textbox\")\n            form_ctrl.fill(Task.DEADLINE)\n        except Exception as e:\n            allure.attach(\n                self.page.screenshot(),\n                name=\"Failed filling deadline\",\n                attachment_type=allure.attachment_type.PNG\n            )\n            allure.attach(str(e), name=\"Exception Trace\")\n            allure.fail(\"Не удалось заполнить дату\")\n    \n        with allure.step(\"Заполнение комментария\"):\n            self.page.locator('textarea').nth(1).click()\n            self.page.locator('textarea').nth(1).fill('PlayWright')\n    \n        try:\n            form_ctrl = self.page.locator(\"div\").filter(\n                has_text=re.compile(r\"^ИсполнительСрок$\")\n            ).get_by_role(\"combobox\")\n            form_ctrl.fill(Task.EXECUTOR)\n            self.page.locator(f\"text={Task.EXECUTOR}\").click()\n        except Exception as e:\n            allure.attach(\n                self.page.screenshot(),\n                name=\"Failed filling executor\",\n                attachment_type=allure.attachment_type.PNG\n            )\n            allure.attach(str(e), name=\"Exception Trace\")\n            allure.fail(\"Не удалось заполнить исполнителя или сохранить изменения\")\n    \n        with allure.step(\"Отправка поручения\"):\n            try:\n                self.page.get_by_text(Task.SEND_BTN)\n                self.page.click(Task.SEND_BTN)\n                self.page.locator(\"div\").filter(has_text=re.compile(r\"^Да$\")).nth(1).click()\n            except Exception as e:\n                allure.attach(\n                    self.page.screenshot(),\n                    name=\"Failed sending task\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n                allure.attach(str(e), name=\"Exception Trace\")\n                allure.fail(\"Не удалось отправить поручение\")\n    \n        with allure.step(\"Нажатие на кнопку информации о текущем пользователе\"):\n            try:\n                self.page.locator(\"#current-user-info\").get_by_role(\"img\").click()\n            except Exception as e:\n                allure.attach(\n                    self.page.screenshot(),\n                    name=\"Failed click on user info button\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n                allure.attach(str(e), name=\"Exception Trace\")\n                allure.fail(\"Не удалось нажать на кнопку текущего пользователя\")\n    \n        with allure.step(\"Нажатие на кнопку 'Выйти'\"):\n            try:\n                self.page.locator(\"div\").get_by_text(\"Выйти\").click()\n            except Exception as e:\n                allure.attach(\n                    self.page.screenshot(),\n                    name=\"Failed click on 'Выйти'\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n                allure.attach(str(e), name=\"Exception Trace\")\n                allure.fail(\"Не удалось нажать на кнопку 'Выйти'\")\n    \n        with allure.step(\"Нажатие на кнопку 'Другой пользователь'\"):\n            try:\n>               self.page.locator(\"div\").get_by_text(\"Другой пользователь\").click()\n\npages\\task_main_page.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:14929: in click\n    self._sync(\nvenv\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\nvenv\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\nvenv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x000002650EF4CD70>, cb = <function Channel.send.<locals>.<lambda> at 0x000002650EF15760>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 60000ms exceeded.\nE           Call log:\nE           waiting for locator(\"div\").get_by_text(\"Другой пользователь\")\n\nvenv\\Lib\\site-packages\\playwright\\_impl\\_connection.py:514: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_docflow.TestTaskCreate object at 0x000002650DAC1E50>, browser = <Page url='https://deloros.centrvd.ru/client/#/folder/71'>\n\n    def test_task_create(self, browser):\n        p = TaskPage(browser)\n>       p.test_self_task()\n\nTests\\test_docflow.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\task_main_page.py:150: in test_self_task\n    allure.fail(\"Не удалось нажать на кнопку 'Другой пользователь'\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nparam = \"Не удалось нажать на кнопку 'Другой пользователь'\", screenshot = None, exception_trace = None\n\n    def fail(param, screenshot=None, exception_trace=None):\n        with step(\"Failing step\"):\n            if screenshot:\n                attach(\n                    screenshot,\n                    name=\"Screenshot on failure\",\n                    attachment_type=attachment_type.PNG\n                )\n            if exception_trace:\n                attach(exception_trace, name=\"Exception Trace\", attachment_type=attachment_type.TEXT)\n>           raise AssertionError(f\"Test failed due to: {param}\")\nE           AssertionError: Test failed due to: Не удалось нажать на кнопку 'Другой пользователь'\n\nvenv\\Lib\\site-packages\\allure.py:56: AssertionError"}, "steps": [{"name": "Нажатие на кнопку 'Создать'", "status": "passed", "start": 1718619583535, "stop": 1718619586349}, {"name": "Выбор 'Прочее'", "status": "passed", "start": 1718619587375, "stop": 1718619587773}, {"name": "Поиск и выбор задачи", "status": "passed", "start": 1718619588789, "stop": 1718619590408}, {"name": "Заполнение комментария", "status": "passed", "start": 1718619591855, "stop": 1718619592603}, {"name": "Отправка поручения", "status": "passed", "start": 1718619594727, "stop": 1718619597406}, {"name": "Нажатие на кнопку информации о текущем пользователе", "status": "passed", "start": 1718619597406, "stop": 1718619597710}, {"name": "Нажатие на кнопку 'Выйти'", "status": "passed", "start": 1718619597710, "stop": 1718619598076}, {"name": "Нажатие на кнопку 'Другой пользователь'", "status": "failed", "statusDetails": {"message": "AssertionError: Test failed due to: Не удалось нажать на кнопку 'Другой пользователь'\n", "trace": "  File \"C:\\Users\\admin\\PycharmProjects\\DelRu\\pages\\task_main_page.py\", line 150, in test_self_task\n    allure.fail(\"Не удалось нажать на кнопку 'Другой пользователь'\")\n  File \"C:\\Users\\admin\\PycharmProjects\\DelRu\\venv\\Lib\\site-packages\\allure.py\", line 56, in fail\n    raise AssertionError(f\"Test failed due to: {param}\")\n"}, "steps": [{"name": "Failing step", "status": "failed", "statusDetails": {"message": "AssertionError: Test failed due to: Не удалось нажать на кнопку 'Другой пользователь'\n", "trace": "  File \"C:\\Users\\admin\\PycharmProjects\\DelRu\\venv\\Lib\\site-packages\\allure.py\", line 56, in fail\n    raise AssertionError(f\"Test failed due to: {param}\")\n"}, "start": 1718619658567, "stop": 1718619658567}], "attachments": [{"name": "Failed click on 'Другой пользователь'", "source": "289d4a87-91b8-40d0-a850-6ef2d350f011-attachment.png", "type": "image/png"}, {"name": "Exception Trace", "source": "a188fa39-86c8-4242-8881-9af0b5c30f96-attachment.attach"}], "start": 1718619598076, "stop": 1718619658569}], "start": 1718619583535, "stop": 1718619658571, "uuid": "e363faee-1d9c-4ec6-a42c-5ccdd7ca87cb", "historyId": "3a1e4fdff6546382de605d3e3a25376a", "testCaseId": "3a1e4fdff6546382de605d3e3a25376a", "fullName": "Tests.test_docflow.TestTaskCreate#test_task_create", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('user_login')"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_docflow"}, {"name": "subSuite", "value": "TestTaskCreate"}, {"name": "host", "value": "DESKTOP-B17VF3R"}, {"name": "thread", "value": "6772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_docflow"}]}